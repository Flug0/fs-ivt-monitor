# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fs-ivt-gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject, QThread, pyqtSignal
from pyqtgraph import PlotWidget, plot
import pyqtgraph
from ivt_data_collector import Data_collector

class Worker(QObject):
    finished = pyqtSignal()
    progress = pyqtSignal(int)
    data = pyqtSignal(str)

    def run(self):
        self.d = Data_collector()
        while True:
            if self.d.run():
                self.data.emit(self.d.send_data())

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(1100, 850)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("background-color: rgb(30, 30, 30);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalScrollBar = QtWidgets.QScrollBar(self.centralwidget)
        self.horizontalScrollBar.setStyleSheet("color: rgb(230, 230, 230);\n"
"background-color: rgb(80, 80, 80);")
        self.horizontalScrollBar.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalScrollBar.setObjectName("horizontalScrollBar")
        self.gridLayout.addWidget(self.horizontalScrollBar, 1, 0, 1, 3)
        self.graphicsView = PlotWidget(self.centralwidget)
        brush = QtGui.QBrush(QtGui.QColor(30, 30, 30))
        brush.setStyle(QtCore.Qt.SolidPattern)
        self.graphicsView.setBackgroundBrush(brush)
        self.graphicsView.setObjectName("graphicsView")
        self.gridLayout.addWidget(self.graphicsView, 0, 0, 1, 3)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setStyleSheet("color: rgb(230, 230, 230);")
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout.addWidget(self.pushButton_2, 4, 1, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setStyleSheet("color: rgb(230, 230, 230);")
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 4, 0, 1, 1)
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setObjectName("comboBox")
        self.gridLayout.addWidget(self.comboBox, 4, 2, 1, 1)
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("DejaVu Sans")
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setAutoFillBackground(False)
        self.label.setStyleSheet("color: rgb(230, 230, 230);")
        self.label.setTextFormat(QtCore.Qt.PlainText)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 3, 2, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1100, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Multithreading stuff to enable updating window and backend stuff at the same time
        self.thread = QThread()
        self.worker = Worker()
        self.worker.moveToThread(self.thread)

        self.thread.started.connect(self.worker.run)
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)

        # Connect worker.data to get_worker_data
        self.worker.data.connect(self.get_worker_data)

        self.thread.start()


        self.pushButton.clicked.connect(lambda:self.button_run())
        self.pushButton_2.clicked.connect(lambda:self.load())
        self.pushButton_2.clicked.connect(lambda:self.get_worker_data())

        self.run = False

        # Add legend
        self.graphicsView.addLegend()

        self.y = [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]
        self.x = [-0.3, -0.2, -0.1]

        self.data_line0 = self.graphicsView.plot(self.x, self.y[0],
                          pen=pyqtgraph.mkPen('r', width=5), name="Current")
        self.data_line1 = self.graphicsView.plot(self.x, self.y[1],
                          pen=pyqtgraph.mkPen('g', width=5), name="Voltage 1")
        self.data_line2 = self.graphicsView.plot(self.x, self.y[2],
                          pen=pyqtgraph.mkPen('b', width=5), name="Voltage 2")
        self.data_line3 = self.graphicsView.plot(self.x, self.y[3],
                          pen=pyqtgraph.mkPen('y', width=5), name="Voltage 3")


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Choose channel"))
        self.pushButton.setText(_translate("MainWindow", "RUN"))
        self.pushButton_2.setText(_translate("MainWindow", ""))

    def get_worker_data(self, data):
        data = data.split("$")
        # Add time to x-axis
        self.x.append(float(data.pop(0)))
        # Add elements to respective y-axis
        for i, val in enumerate(data):
            self.y[i].append(float(val))
        self.update()

    def update(self):
        self.data_line0.setData(self.x, self.y[0])
        self.data_line1.setData(self.x, self.y[1])
        self.data_line2.setData(self.x, self.y[2])
        self.data_line3.setData(self.x, self.y[3])

    # Take new x-value, y-values
    def plot(self, x, y):
        for i, value in enumerate(y):
            self.y[i].append(value)
        self.x.append(x)
        self.data_line0.setData(self.x, self.y[0])
        self.data_line1.setData(self.x, self.y[1])
        self.data_line2.setData(self.x, self.y[2])
        self.data_line3.setData(self.x, self.y[3])

    def button_run(self):
        self.run = True
        self.x.pop()
        self.y[0].pop()
        self.data_line0.setData(self.x, self.y[0])
        pass

    def load(self):
        self.y[0].append(5)
        self.x.append(10)
        self.data_line0.setData(self.x, self.y[0])
        pass



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
